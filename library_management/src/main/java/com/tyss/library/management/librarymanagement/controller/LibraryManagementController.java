package com.tyss.library.management.librarymanagement.controller;

import java.util.Arrays;
import java.util.List;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.tyss.library.management.librarymanagement.dto.BookRegistration;
import com.tyss.library.management.librarymanagement.dto.BookTransaction;
import com.tyss.library.management.librarymanagement.dto.BooksInventory;
import com.tyss.library.management.librarymanagement.dto.LibraryResponse;
import com.tyss.library.management.librarymanagement.dto.Users;
import com.tyss.library.management.librarymanagement.service.LibraryManagementService;
@CrossOrigin(origins="*",allowedHeaders="*",allowCredentials="true")
@RestController
@RequestMapping("librarymanagement")
public class LibraryManagementController {
	@Autowired
	private LibraryManagementService service;
	
	@Autowired
	private LibraryResponse response;
	
	
	
	@PostMapping(path="/register",produces=MediaType.APPLICATION_JSON_VALUE,consumes=MediaType.APPLICATION_JSON_VALUE)
	public LibraryResponse registerUser(@RequestBody Users userInfo) {
		String autogenPassword="U_"+userInfo.getUserName().replace(' ','_').toLowerCase()+(new Random().nextInt(900000)+1000000);
		userInfo.setUserPassword(autogenPassword);
		System.out.println(userInfo.getUserEmail());
		String to=userInfo.getUserEmail();
		String subject = "your password for library management system login";
		String body = "Welcome Mr/Ms "+userInfo.getUserName().toUpperCase()+"."+" Your Email Id is "+userInfo.getUserEmail()+" and your password is : "+userInfo.getUserPassword()+ ".  It is an autogenerated mail..Please do not Reply..";
		if(service.registerUser(userInfo,to,subject,body)) {
			response.setStatusCode(200);
			response.setMessage("Success");
			response.setDescription("User is added successfully");
			return response;
		}else {
			response.setStatusCode(400);
			response.setMessage("Failure");
			response.setDescription("User is not added");
			return response;
		}
	}
	
	@GetMapping(path="/login",produces=MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	public LibraryResponse loginUser(@RequestParam("userName") String name,@RequestParam("password") String password){
		System.out.println("username..."+name);
		System.out.println("password...."+password);
		Users user=service.loginUser(name, password);
		if(user!=null) {
			response.setStatusCode(200);
			response.setMessage("Success");
			response.setDescription("User Logged In");
			response.setUsers(Arrays.asList(user));
			return response;
		}else {
			response.setStatusCode(400);
			response.setMessage("failure");
			response.setDescription("Invalid email or password");
			return response;
		}
		}
		
	
	@PutMapping(path="/update",produces=MediaType.APPLICATION_JSON_VALUE,consumes=MediaType.APPLICATION_JSON_VALUE)
	public LibraryResponse updateUser(@RequestBody Users userInfo) {
		if(service.updateUser(userInfo)) {
			response.setStatusCode(200);
			response.setMessage("Success");
			response.setDescription("User is updated successfully");
			return response;
		}else {
			response.setStatusCode(400);
			response.setMessage("Failure");
			response.setDescription("User is not updated");
			return response;
		}
	}
	
	@DeleteMapping(path="/remove/{id}",produces=MediaType.APPLICATION_JSON_VALUE)
	public LibraryResponse deleteUser(@PathVariable("id") int id) {
		if(service.removeUser(id)) {
			response.setStatusCode(200);
			response.setMessage("Success");
			response.setDescription("User is deleted successfully");
			return response;
		}else {
			response.setStatusCode(400);
			response.setMessage("Failure");
			response.setDescription("User is not deleted");
			return response;
		}
		}
	
	
	@GetMapping(path="/get-all",produces=MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	public LibraryResponse getAllUsers(){
		
		List<Users> users = service.getAllUsers();
		if(users!=null) {
			response.setStatusCode(200);
			response.setMessage("Success");
			response.setDescription("All  Users List");
			response.setUsers(users);
			return response;
		}else {
			response.setStatusCode(400);
			response.setMessage("Failure");
			response.setDescription("User is not present");
			return response;
		}
		}
	
	@PostMapping(path="/addBook",produces=MediaType.APPLICATION_JSON_VALUE,consumes=MediaType.APPLICATION_JSON_VALUE)
	public LibraryResponse addBook(@RequestBody BooksInventory bookDto) {
		 if(service.addBook(bookDto)) {
			 response.setStatusCode(200);
				response.setMessage("Success");
				response.setDescription("Book Added");
				return response;
			}else {
				response.setStatusCode(400);
				response.setMessage("Failure");
				response.setDescription("Book Not Added");
				return response;
			}
	}
	
	@PutMapping(path="/updateBook",consumes=MediaType.APPLICATION_JSON_VALUE)
	public LibraryResponse updateBook(@RequestBody BooksInventory bookInfo) {
		if(service.updateBook(bookInfo)) {
			response.setStatusCode(200);
			response.setMessage("Success");
			response.setDescription("Book is updated successfully");
			return response;
		}else {
			response.setStatusCode(400);
			response.setMessage("Failure");
			response.setDescription("Book is not updated");
			return response;
		}
	}
	
	@DeleteMapping(path="/deleteBook/{id}",produces=MediaType.APPLICATION_JSON_VALUE)
	public LibraryResponse deleteBook(@PathVariable("id") int id) {
		if(service.deleteBook(id)){
			response.setStatusCode(200);
			response.setMessage("Success");
			response.setDescription("book is deleted successfully");
			return response;
		}else {
			response.setStatusCode(400);
			response.setMessage("Failure");
			response.setDescription("book is not deleted");
			return response;
		}
		}
	
	/*
	 * @GetMapping(path="/getBook",produces=MediaType.APPLICATION_JSON_VALUE) public
	 * LibraryResponse getBook(BooksInventory book) { BooksInventory
	 * books=service.getBook(book); if(books != null) {
	 * 
	 * } }
	 */
	
	@GetMapping(path="/getAllBook",produces=MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	public LibraryResponse getAllBooks(){
		List<BooksInventory> books = service.getAllBooks();
		if(books!=null) {
			response.setStatusCode(200);
			response.setMessage("Success");
			response.setDescription("All Books List");
			response.setBooks(books);
			return response;
		}else {
			response.setStatusCode(400);
			response.setMessage("Failure");
			response.setDescription("Error Occured");
			return response;
		}
	}//End of getAllBooks
	
	/*
	 * @GetMapping(path="/acceptBookRequest",produces=MediaType.
	 * APPLICATION_JSON_VALUE)
	 * 
	 * @ResponseBody public StudentBookDto acceptBookRequest(@RequestParam("userId")
	 * int userId,@RequestParam("bookId") int bookId) { return
	 * service.acceptBookRequest(userId, bookId); }
	 * 
	 * @GetMapping(path="/getIssueBooks",produces=MediaType.APPLICATION_JSON_VALUE)
	 * 
	 * @ResponseBody public List<StudentBookDto>
	 * getIssueBooks(@RequestParam("userId") int userId) { return
	 * service.getIssueBookList(userId); }
	 * 
	 * @DeleteMapping(path="/returnBook",produces=MediaType.APPLICATION_JSON_VALUE)
	 * public boolean returnIssueBook(@RequestParam("bookId") int bookId) { return
	 * service.returnBook(bookId); }
	 */
	@GetMapping(path="/getByName",produces=MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	public LibraryResponse searchByName(@RequestParam("userName") String userName){
		List<Users> users=service.searchByName(userName.trim());
		if(users!=null) {
			response.setStatusCode(200);
			response.setMessage("Success");
			response.setDescription("All  Users List");
			response.setUsers(users);
			return response;
		}else {
			response.setStatusCode(400);
			response.setMessage("Failure");
			response.setDescription("User is not present");
			return response;
		}
	}
	
	@GetMapping(path="/changepwd",produces=MediaType.APPLICATION_JSON_VALUE)
	@ResponseBody
	public LibraryResponse changePassword(@RequestParam("userEmail") String email,@RequestParam("userPassword") String oldPassword,@RequestParam("newPassword") String newPassword) {
		
		if(service.changePassword(email, oldPassword, newPassword)) {
			response.setStatusCode(200);
			response.setMessage("Success");
			response.setDescription("Password is changed successfully");
			return response;
		}else {
			response.setStatusCode(400);
			response.setMessage("Failure");
			response.setDescription("Some error Occured");
			return response;
		}
		
	}
	
	@PostMapping(path = "/allocatebook/{userId}", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
	public LibraryResponse addBookReg(@PathVariable("userId")int id,@RequestBody BooksInventory book) {
		System.out.println(book);
		LibraryResponse response = new LibraryResponse();
		if (service.requestBook(book,id)) {
			response.setStatusCode(200);
			response.setMessage("success");
			response.setDescription("data  successfully stored..");
		} else {
			response.setStatusCode(400);
			response.setMessage("failure");
			response.setDescription("data not successfully stored..");
		}
		return response;
	}

	@GetMapping(path = "/viewreqs", produces = MediaType.APPLICATION_JSON_VALUE)
	public LibraryResponse getAllBookreqs() {

	List<BookRegistration> books = service.getAllBook();
	if(books!=null) {
		response.setStatusCode(200);
		response.setMessage("success");
		response.setDescription("data  successfully stored..");
		response.setBookReg(books);
	} else {
		response.setStatusCode(400);
		response.setMessage("failure");
		response.setDescription("data not successfully stored..");
	}
	return response;
	}
	
	@PostMapping(path = "/acceptreq", produces = MediaType.APPLICATION_JSON_VALUE, consumes = MediaType.APPLICATION_JSON_VALUE)
	public LibraryResponse addBook(@RequestBody BookRegistration request) {
		LibraryResponse response = new LibraryResponse();
		if (service.addBook(request)) {
			service.removeBook(request.getBookId());
			response.setStatusCode(201);
			response.setMessage("success");
			response.setDescription("data  successfully stored..");
		} else {
			response.setStatusCode(400);
			response.setMessage("failure");
			response.setDescription("data not successfully stored..");
		}
		return response;
	}

	@GetMapping(path = "/userbooks/{userId}", produces = MediaType.APPLICATION_JSON_VALUE)
	public LibraryResponse getAlluserBook(@PathVariable("userId")int id) {

		List<BookTransaction> books = service.getAlluserBooks(id);
		if(books!=null) {
			response.setStatusCode(201);
			response.setMessage("success");
			response.setDescription("data  successfully stored..");
			response.setBookTrans(books);
		} else {
			response.setStatusCode(400);
			response.setMessage("failure");
			response.setDescription("data not successfully stored..");
		}
		return response;
	}

	@DeleteMapping(path = "/bookaction/{bId}", produces = MediaType.APPLICATION_JSON_VALUE)
	public LibraryResponse searchBook1(@PathVariable("bId") String bId) {
		LibraryResponse response = new LibraryResponse();
		if (service.removeBookReg(bId)) {
			response.setStatusCode(201);
			response.setMessage("success");
			response.setDescription("data  successfully deleted..");
		} else {
			response.setStatusCode(400);
			response.setMessage("failure");
			response.setDescription("data not successfully deleted..");
		}
		return response;
	}
}
	

